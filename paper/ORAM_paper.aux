\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{2}}
\citation{PathORAM}
\citation{RingORAM}
\citation{OnionORAM}
\citation{C-ORAM}
\citation{gold}
\citation{goldostrov}
\@writefile{toc}{\contentsline {section}{\numberline {2}Previous work}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Previous tree-based ORAM schemes}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Ring ORAM access. The circled blocks are selected. The buckets which do not contain the target block (levels 1 and 3) send back a reserved dummy block}}{5}}
\newlabel{fig:ringaccess}{{1}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Reverse lexicographical order balances the tree through standardized evictions.}}{6}}
\newlabel{fig:rlo}{{2}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Onion ORAM}{6}}
\citation{damgard}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Onion ORAM Eviction}{7}}
\@writefile{toc}{\contentsline {section}{\numberline {3}C-ORAM}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Accesses}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Evictions}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Oblivious Mergings}{9}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Shows the eviction pattern down a particular path in C-ORAM. Although all the data being pushed down to children buckets by parent buckets are identical, noisy blocks on the eviction path are relevant data to their sibling buckets, and vice versa.}}{10}}
\newlabel{fig:c-evict}{{3}{10}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Our Contributions}{11}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Oblivious Merging Security Explanation}{11}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Two buckets are permuted so ``real" data blocks (in black) are lined up with $E (0)$ blocks (in white) and noisy blocks (grey) are lined up with other noisy blocks. Thus, merging the two blocks occurs without the loss of real data blocks while keeping the number of noisy blocks low}}{12}}
\newlabel{fig:merge}{{4}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Single-bucket permutation}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Experimental Results}{12}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Graph 1: Evaluation of runtime of program based on blocks already in tree}}{13}}
\newlabel{fig:runtimegraph}{{5}{13}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Graph 2: Evaluation of overflow of tree when adding blocks without removal}}{15}}
\newlabel{fig:overflowgraph}{{6}{15}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Figure 7: Graph 3: Evaluation of eviction speed for different frequencies}}{16}}
\newlabel{fig:evictionfreqgraph}{{7}{16}}
\bibstyle{abbrv}
\bibdata{ORAM_paper}
\bibcite{damgard}{1}
\bibcite{OnionORAM}{2}
\bibcite{gold}{3}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Conclusions and Future Work}{17}}
\bibcite{goldostrov}{4}
\bibcite{C-ORAM}{5}
\bibcite{RingORAM}{6}
\bibcite{PathORAM}{7}
